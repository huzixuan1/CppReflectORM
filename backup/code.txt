#include <string>
#include <iostream>

using namespace std;

template<typename T>
std::string getStructName(const T& struct_t) {
    std::string typeName = typeid(struct_t).name();

    std::string::size_type pos = typeName.find_first_not_of("0123456789");
    if (pos != std::string::npos) {
        return typeName.substr(pos);
    }
    
    return typeName;
}


template<typename... Args>
std::string generateSQL(const std::string tableName, Args&&... args)
{
    std::string sql = "DELETE FROM " + tableName;

    if(sizeof...(args) > 0) {
        sql += " WHERE ";
        int dummy[] = {0, ((void)(sql += args + " AND "), 0)...};
        (void)dummy;
        sql = sql.substr(0, sql.size() - 5);
    }

    return sql;
}

struct deleteData
{
    /* data */
    int id;
    std::string name;
};


int main()
{
    deleteData obj;
    std::string tableName = "userName";
    std::string condition1 = "id = 10";
    std::string condition2 = "userName = 'taotao'";
    // std::string sql = generateSQL(tableName,condition1,condition2);
    std::string sql = generateSQL(getStructName(obj),condition1,condition2);
    std::cout<<"generateSQL:"<<sql<<std::endl;

    return 0;
}